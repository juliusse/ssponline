# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-be:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew backend:checkstyleMain backend:checkstyleTest backend:test
  test-fe:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Run Tests
        run: cd frontend && npm i && npm run lint && CI=true npm test

  package-be:
    needs: [ test-be ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Decrypt secret values
        run: echo ${{ secrets.ANSIBLE_SECRET }} > ./password.txt && ansible-vault view --vault-password-file password.txt backend/src/main/resources/application-secrets.yaml.encrypted > backend/src/main/resources/application-secrets.yaml
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build Image
        run: ./gradlew backend:bootBuildImage
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_KEY }}
      - name: Retag image for commit
        run: docker tag juliusse/ssponline-backend:latest juliusse/ssponline-backend:$GITHUB_SHA
      - name: Push the image
        run: docker push juliusse/ssponline-backend:$GITHUB_SHA

  package-fe:
    needs: [ test-fe ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Build App
        run: cd frontend && npm i && npm run build
      - name: Builds image
        run: docker build --tag juliusse/ssponline-frontend:latest ./frontend
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_KEY }}
      - name: Retag image for commit
        run: docker tag juliusse/ssponline-frontend:latest juliusse/ssponline-frontend:$GITHUB_SHA
      - name: Push the image
        run: docker push juliusse/ssponline-frontend:$GITHUB_SHA

  pre-production-deploy:
    needs: [ package-be, package-fe ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_KEY }}
      - name: pull be image for commit
        run: docker pull juliusse/ssponline-backend:$GITHUB_SHA
      - name: Retag be image to latest
        run: docker tag juliusse/ssponline-backend:$GITHUB_SHA juliusse/ssponline-backend:latest
      - name: Push be image
        run: docker push juliusse/ssponline-backend:latest
      - name: pull fe image for commit
        run: docker pull juliusse/ssponline-frontend:$GITHUB_SHA
      - name: Retag fe image to latest
        run: docker tag juliusse/ssponline-frontend:$GITHUB_SHA juliusse/ssponline-frontend:latest
      - name: Push fe image
        run: docker push juliusse/ssponline-frontend:latest
  production-deploy:
    needs: [ pre-production-deploy ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add ssh key
        run: echo "${{ secrets.AWS_SSH_KEY }}" >> ~/ssh_key && chmod 600 ~/ssh_key
      - name: Update docker-compose.yml on server
        run: scp -o StrictHostKeyChecking=no -pr -i ~/ssh_key deployment ${{ secrets.AWS_SSH_USER_NAME }}@${{ secrets.AWS_SSH_IP }}:${{ secrets.AWS_SSH_USER_HOME }}
      - name: Update Deployment
        run: ssh -o StrictHostKeyChecking=no -i ~/ssh_key ${{ secrets.AWS_SSH_USER_NAME }}@${{ secrets.AWS_SSH_IP }} "cd ${{ secrets.AWS_SSH_USER_HOME }}/deployment && sudo docker compose -p ssponline down && sudo docker compose pull && sudo docker compose -p ssponline up -d"
